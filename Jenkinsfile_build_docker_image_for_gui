#!groovy

import java.text.SimpleDateFormat

def enablePromotionToLatest = true

pipeline {
    agent {
        node {
            label 'docker'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    environment {
        DOCKER_IMAGE_NAME = 'hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides-gui'
        DATE = (new SimpleDateFormat("yyyy-MM-dd")).format(new Date())
        BUILD_TIME = (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())
    }
    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'identify Docker hub image')
    }
    stages {
        stage("Docker build 'testing' image") {
            steps {
                script {
                    def labelArgs = "--label tuyauterie-git-commit=${GIT_COMMIT} --label 'tuyauterie-build-time=${env.BUILD_TIME}'"
                    sh "echo 'FROM hesperides/hesperides-gui' | docker build --no-cache --pull ${labelArgs} -t $DOCKER_IMAGE_NAME:testing -"
                    // On affiche tous les labels de l'image générée :
                    sh "docker inspect --format '{{.ContainerConfig.Labels}}' $DOCKER_IMAGE_NAME:testing"
                    // On publie l'image sur artifactory :
                    withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                        sh "docker push $DOCKER_IMAGE_NAME:testing"
                    }
                }
            }
        }
        stage('Déploiement de "testing" sur REL1') {
            when { expression { params.DOCKER_TAG == 'latest' } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "REL1")]
            }
        }
        stage("Tests d'intégration et de non-regression") {
            steps {
                echo('TODO')
            }
        }
        stage('Création/mise à jour du tag sur repo GitHub') {
            when { expression { params.DOCKER_TAG == 'latest' } }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-hesperides-adm', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        dir ('hesperides-gui') {
                            // Le tag peut déjà exister, on essaie donc de le supprimer au préalable
                            sh "git config user.name 'Jenkins pipeline'"
                            sh "git tag -d $DATE || true"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides-gui.git --delete $DATE || true"
                            sh "git tag $DATE"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides-gui.git --tags"
                        }
                    }
                }
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'latest'") {
            when { expression { params.DOCKER_TAG == 'latest' } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'latest')]
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'integration'") {
            when { expression { params.DOCKER_TAG != 'latest' } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'integration')]
            }
        }
        stage('Déploiement de "latest" sur INT1') {
            when { expression { params.DOCKER_TAG != 'latest' && enablePromotionToLatest } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "INT1")]
            }
        }
    }
    post {
        always {
            deleteDir()
        }
        failure {
            // Notification vers room Teams Avengers > Hefpérides
            office365ConnectorSend  status: currentBuild.currentResult, webhookUrl: 'https://outlook.office.com/webhook/838cfd20-344e-4053-97eb-5fa1f7fb25f9@85eca096-674d-4fd9-9a9e-ae1178e2ee56/IncomingWebhook/1999a50228794e95a1c17374a131da2e/56ceab7b-fee5-4173-882e-6504575c0bc8'
        }
    }
}
