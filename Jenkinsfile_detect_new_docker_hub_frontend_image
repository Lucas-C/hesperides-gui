#!groovy

import groovy.json.JsonSlurperClassic

def newDockerImagePublished = false

pipeline {
    agent {
        node {
            label 'default'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    triggers{ cron('H/5 * * * 1-5') }
    stages {
        stage("New DockerHub image detection") {
            steps {
                retry(3) {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'hesperides-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            //newDockerImagePublished = getREL1frontendGitCommit() != getDockerHubLatestImageGitCommit('hesperides/hesperides-gui', env.USERNAME, env.PASSWORD)
                            newDockerImagePublished = getDockerImageGitCommitLabelFromArtifact('hesperides/vsct-hesperides-gui', 'testing') != getDockerHubLatestImageGitCommit('hesperides/hesperides-gui', 'latest', env.USERNAME, env.PASSWORD)
                        }
                    }
                }
            }
        }
        stage("Trigger Docker frontend image build & deploy") {
            when { expression { newDockerImagePublished } }
            steps {
                build './build_docker_image_for_gui'
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}

def getREL1frontendGitCommit() {
    try {
        String gitCommit = sh(returnStdout: true, script: """curl --fail -sk https://hesperides-dev.socrate.vsct.fr:56789/index.html | grep -F ' GIT_COMMIT ' | sed "s/.*'\\([^ ]\\+\\)'.*/\\1/" """).trim()
        println "Current frontend REL1 version is git commit: $gitCommit"
        return gitCommit
    } catch(Exception exception) {
        println "Exception: $exception"
        println "As frontend on REL1 platform cannot be reached, we trigger a build & redeploy"
        return 'UNREACHABLE'
    }
}

def getDockerImageGitCommitLabelFromArtifact(String image, String tag) {
    withCredentials([usernamePassword(credentialsId: 'hesperides', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        final manifestResponse = sh(returnStdout: true, script: "curl --fail -su $USERNAME:$PASSWORD https://hesperides-docker-all-local.artifact.cloud.socrate.vsct.fr/v2/${image}/manifests/${tag}").trim()
        final topLayer = new JsonSlurperClassic().parseText(manifestResponse).history[0].v1Compatibility
        final gitCommit = new JsonSlurperClassic().parseText(topLayer).config.Labels.git_commit
        println "Artifact ${image}:${tag} has label git_commit=$gitCommit"
        return gitCommit
    }
}

// API doc: https://docs.docker.com/registry/spec/api/#manifest
// Code inspired by: https://gist.github.com/alexanderilyin/8cf68f85b922a7f1757ae3a74640d48a
def getDockerHubLatestImageGitCommit(String image, String tag, String username, String password) {
    final AUTH_DOMAIN = 'auth.docker.io'
    final AUTH_SERVICE = 'registry.docker.io'
    final API_DOMAIN = 'registry-1.docker.io'
    final AUTH_SCOPE = "repository:${image}:pull"
    final tokenResponse = sh(returnStdout: true, script: "curl --fail --silent -u ${username}:${password} 'https://${AUTH_DOMAIN}/token?service=${AUTH_SERVICE}&scope=${AUTH_SCOPE}'").trim()
    final token = new JsonSlurperClassic().parseText(tokenResponse).token
    final manifestResponse = sh(returnStdout: true, script: "curl --fail --silent -H 'Authorization: Bearer ${token}' https://${API_DOMAIN}/v2/${image}/manifests/${tag}").trim()
    final topLayer = new JsonSlurperClassic().parseText(manifestResponse).history[0].v1Compatibility
    final gitCommit = new JsonSlurperClassic().parseText(topLayer).config.Labels.git_commit
    println "Docker hub ${image}:${tag} has label git_commit=$gitCommit"
    return gitCommit
}
