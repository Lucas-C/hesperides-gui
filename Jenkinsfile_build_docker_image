#!groovy

import java.text.SimpleDateFormat

import groovy.json.JsonSlurperClassic

def newDockerImagePublished = false
def enablePromotionToLatest = true

pipeline {
    agent {
        node {
            label 'corretto11-maven'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    triggers {
        // Le repo GitHub est bien surveillé, et non celui contenant ce Jenkinsfile
        // -> c'est documenté ici: https://github.com/jenkinsci/workflow-scm-step-plugin/blob/master/README.md#changelogs
        // "Jenkins will automatically remember the SCMs run in the last build of the project"
        pollSCM('H/5 * * * 1-5')
    }
    environment {
        DOCKER_IMAGE_NAME = 'hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides'
        DATE = (new SimpleDateFormat("yyyy-MM-dd")).format(new Date())
        BUILD_TIME = (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())
    }
    parameters {
        booleanParam(name: 'IGNORE_NEW_VERSION_CHECK', defaultValue: false)
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'identify Docker hub image')
        // TODO(amélioration): plutôt que ce param, trouver un moyen de faire du multi-branches (limite du pipeline MultiBranches: ne supporte pas de Jenkinsfile hors-repo cible)
        // cf. https://stackoverflow.com/questions/39041342/jenkins-multibranch-pipeline-with-jenkinsfile-from-different-repository
    }
    stages {
        stage("Detect if a new image has been published on Docker hub") {
            steps {
                retry(3) {
                    script {

                        if (params.IGNORE_NEW_VERSION_CHECK) {
                            newDockerImagePublished = true
                        } else {
                            withCredentials([usernamePassword(credentialsId: 'github-hesperides-adm', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                newDockerImagePublished = getREL1gitCommit() != getDockerHubLatestImageGitCommit(env.USERNAME, env.PASSWORD)
                            }
                        }
                    }
                }
            }
        }
        stage("Docker build 'testing' image") {
            when { expression { newDockerImagePublished } }
            steps {
                script {
                    def labelArgs = "--label tuyauterie-git-commit=${env.GIT_COMMIT} --label 'tuyauterie-build-time=${env.BUILD_TIME}'"
                    echo "docker build --no-cache --pull --build-arg FROM_VERSION=${params.DOCKER_TAG} ${labelArgs} ./vsct-hesperides -t $DOCKER_IMAGE_NAME:testing"
                    sh "docker build --no-cache --pull --build-arg FROM_VERSION=${params.DOCKER_TAG} ${labelArgs} ./vsct-hesperides -t $DOCKER_IMAGE_NAME:testing"
                    // On affiche tous les labels de l'image générée :
                    sh "docker inspect --format '{{.ContainerConfig.Labels}}' $DOCKER_IMAGE_NAME:testing"
                    // On publie l'image sur artifactory :
                    withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                        sh "docker push $DOCKER_IMAGE_NAME:testing"
                    }
                }
            }
        }
        stage('Redéploiement de REL1') {
            when { expression { newDockerImagePublished && params.DOCKER_TAG == 'latest' } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "REL1")]
            }
        }
        stage("Tests de performances Gatling") {
            when { expression { newDockerImagePublished && params.DOCKER_TAG == 'latest' } }
            steps {
                script {
                    dir('hesperides') {
                        git(url: 'https://github.com/voyages-sncf-technologies/hesperides',
                            branch: 'master')
                        // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                        withMaven(globalMavenSettingsConfig: 'global_maven_settings', mavenSettingsConfig: 'local_maven_settings') {
                            withCredentials([usernamePassword(credentialsId: 'hesperides', usernameVariable: 'LAMBDA_USERNAME', passwordVariable: 'LAMBDA_PASSWORD')]) {
                                // Warm up :
                                sh "mvn -pl tests/perfs gatling:test -Pgatling -Dgatling.simulationClass=HesperidesApi " +
                                        "-DbaseUrl=https://hesperides-dev.socrate.vsct.fr:56789/rest " +
                                        "-Dauth=$LAMBDA_USERNAME:$LAMBDA_PASSWORD " +
                                        "-Dduration=5s >/dev/null 2>&1 || true"
                                sh "mvn -pl tests/perfs gatling:test -Pgatling -Dgatling.simulationClass=HesperidesApi " +
                                        "-DbaseUrl=https://hesperides-dev.socrate.vsct.fr:56789/rest " +
                                        "-Dauth=$LAMBDA_USERNAME:$LAMBDA_PASSWORD " +
                                        "-DusersPerSecond=5 " + // 5 utilisateurs par seconde
                                        "-Dduration=60seconds " + // Pendant 1 minute
                                        "-DpercentOkMin=99 " + // On attend 99% de requêtes OK
                                        "-Dpercentile99ResponseTimeMax=15000 " + // 99% des requêtes doivent prendre moins de 12 secondes
                                        "-Dverbose=true"
                            }
                        }
                    }
                }
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'integration'") {
            when { expression { newDockerImagePublished && params.DOCKER_TAG != 'latest' } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'integration')]
            }
        }
        stage('Redéploiement de INT1') {
            when { expression { newDockerImagePublished && params.DOCKER_TAG != 'latest' } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "INT1")]
            }
        }
        stage("Integ/NR: BDDs ActiveDirectory") {
            when { expression { newDockerImagePublished } }
            environment {
                LDAP_URL = 'ldaps://ad-ldap-access.socrate.vsct.fr:636'
                LDAP_DOMAIN = 'groupevsc'
                LDAP_USER_SEARCH_BASE = 'dc=groupevsc,dc=com'
                LDAP_ROLE_SEARCH_BASE = 'ou=ARCHITECTURE,dc=groupevsc,dc=com'

                // Les 3 variables suivantes sont-elles toujours utiles ?
                LAMBDA_USER_GROUP_DN = 'CN=DL_REST_HESPERIDES,OU=Distribution_List,OU=ARCHITECTURE,DC=groupevsc,DC=com'
                LDAP_PROD_GROUP_DN = 'CN=GG_A_HESPERIDES_PROD,OU=Groups,OU=ARCHITECTURE,DC=groupevsc,DC=com'
                LDAP_TECH_GROUP_DN = 'CN=DL_VSCT_Avengers,OU=Distribution_List,OU=ARCHITECTURE,DC=groupevsc,DC=com'

                PROD_GROUP_CN = 'GG_A_HESPERIDES_PROD'
                OTHER_GROUP_CN = 'DL_REST_HESPERIDES'
            }
            steps {
                script {
                    dir('hesperides') {
                        git(url: 'https://github.com/voyages-sncf-technologies/hesperides',
                            branch: 'master')
                        withMaven(globalMavenSettingsConfig: 'global_maven_settings', mavenSettingsConfig: 'local_maven_settings') {
                            // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                            withCredentials([usernamePassword(credentialsId: 'hesperides', usernameVariable: 'LAMBDA_USERNAME', passwordVariable: 'LAMBDA_PASSWORD')]) {
                                withCredentials([usernamePassword(credentialsId: 'a_prod_user', usernameVariable: 'PROD_USERNAME', passwordVariable: 'PROD_PASSWORD')]) {
                                    withCredentials([usernamePassword(credentialsId: 'rundeck_usl', usernameVariable: 'NOGROUP_USERNAME', passwordVariable: 'NOGROUP_PASSWORD')]) {
                                        sh "mvn install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true"
                                        sh "mvn -pl tests/activedirectory-integration verify " +
                                                "-Dauth.lambdaUsername=$LAMBDA_USERNAME " +
                                                "-Dauth.lambdaPassword=$LAMBDA_PASSWORD " +
                                                "-Dauth.prodUsername=$PROD_USERNAME " +
                                                "-Dauth.prodPassword=$PROD_PASSWORD " +
                                                "-Dauth.nogroupUsername=$NOGROUP_USERNAME " +
                                                "-Dauth.nogroupPassword=$NOGROUP_PASSWORD " +
                                                "-Dauth.prodGroupCn=$PROD_GROUP_CN " +
                                                "-Dauth.otherGroupCn=$OTHER_GROUP_CN " +
                                                "-Djavax.net.ssl.trustStore=\$PWD/../vsct-hesperides/certificates/trustore"
                                        gatlingArchive()
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Création/mise à jour du tag sur repo GitHub') {
            when { expression { newDockerImagePublished && params.DOCKER_TAG == 'latest' } }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-hesperides-adm', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        dir('hesperides') {
                            // Le tag peut déjà exister, on essaie donc de le supprimer au préalable
                            sh "git config user.name 'Jenkins pipeline'"
                            sh "git tag -d $DATE || true"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides.git --delete $DATE || true"
                            sh "git tag $DATE"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides.git --tags"
                        }
                    }
                }
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'latest'") {
            when { expression { newDockerImagePublished && params.DOCKER_TAG == 'latest' && enablePromotionToLatest } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'latest')]
            }
        }
    }
    post {
        always {
            deleteDir()
        }
        /*failure {
            // Notification vers room Teams Avengers > Hefpérides
            office365ConnectorSend  status: currentBuild.currentResult, webhookUrl: 'https://outlook.office.com/webhook/838cfd20-344e-4053-97eb-5fa1f7fb25f9@85eca096-674d-4fd9-9a9e-ae1178e2ee56/IncomingWebhook/1999a50228794e95a1c17374a131da2e/56ceab7b-fee5-4173-882e-6504575c0bc8'
        }*/
    }
}

def getREL1gitCommit() {
    try {
        final versions = sh(returnStdout: true, script: "curl --fail -sk https://hesperides-dev.socrate.vsct.fr:56789/rest/versions").trim()
        final gitCommit = new JsonSlurperClassic().parseText(versions).GIT_COMMIT
        println "Current backend REL1 version is git commit: $gitCommit"
        return gitCommit
    } catch(Exception exception) {
        println "Exception: $exception"
        return 'UNREACHABLE'
    }
}

// API doc: https://docs.docker.com/registry/spec/api/#manifest
// Code inspired by: https://gist.github.com/alexanderilyin/8cf68f85b922a7f1757ae3a74640d48a
def getDockerHubLatestImageGitCommit(String username, String password) {
    final AUTH_DOMAIN = 'auth.docker.io'
    final AUTH_SERVICE = 'registry.docker.io'
    final API_DOMAIN = 'registry-1.docker.io'
    final IMAGE = 'hesperides/hesperides'
    final TAG = 'latest'
    final AUTH_SCOPE = "repository:${IMAGE}:pull"
    println "OK1"
    final jsonParser = new JsonSlurperClassic()
    println "OK2"
    final tokenResponse = sh(returnStdout: true, script: "curl --fail --silent -u ${username}:${password} 'https://${AUTH_DOMAIN}/token?service=${AUTH_SERVICE}&scope=${AUTH_SCOPE}'").trim()
    println "tokenResponse=$tokenResponse"
    final token = jsonParser.parseText(tokenResponse).token
    println "token=$token"
    final manifestResponse = sh(returnStdout: true, script: "curl --fail --silent -H 'Authorization: Bearer ${TOKEN}' https://${API_DOMAIN}/v2/${IMAGE}/manifests/${TAG}").trim()
    println "manifestResponse=$manifestResponse"
    final topLayer = jsonParser.parseText(manifestResponse).history[0].v1Compatibility
    println "topLayer=$topLayer"
    final gitCommit = jsonParser.parseText(topLayer).config.Labels.git_commit[0..7]
    println "Docker hub latest hesperides/hesperides image has label git_commit=$gitCommit"
    return gitCommit
}
