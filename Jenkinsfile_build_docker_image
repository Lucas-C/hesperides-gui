#!groovy

import java.text.SimpleDateFormat

pipeline {
    agent {
        node {
            label 'maven'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    triggers {
        // Le repo GitHub est bien surveillé, et non celui contenant ce Jenkinsfile
        // -> c'est documenté ici: https://github.com/jenkinsci/workflow-scm-step-plugin/blob/master/README.md#changelogs
        // "Jenkins will automatically remember the SCMs run in the last build of the project"
        pollSCM('H/5 * * * 1-5')
    }
    environment {
        DOCKER_IMAGE_NAME = 'hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides'
        DATE = (new SimpleDateFormat("yyyy-MM-dd")).format(new Date())
        BUILD_TIME = (new SimpleDateFormat("yyyy:MM:dd-HH-mm-ss")).format(new Date())
    }
    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'identify source code version')
        // TODO(amélioration): plutôt que ce param, trouver un moyen de faire du multi-branches (limite du pipeline MultiBranches: ne supporte pas de Jenkinsfile hors-repo cible)
        // cf. https://stackoverflow.com/questions/39041342/jenkins-multibranch-pipeline-with-jenkinsfile-from-different-repository
    }
    stages {
        stage("Docker build 'testing' image") {
            steps {
                dir ('hesperides') {
                    git(url: 'https://github.com/voyages-sncf-technologies/hesperides',
                        branch: params.GIT_BRANCH)
                }
                script {
                    // On complète le Dockerfile pour inclure les fichiers settings.xml & globalSettings.xml durant le build Maven,
                    // ainsi que les certifcats dans l'image finale :
                    sh 'sed -i "1 r vsct-hesperides/Dockerfile.prepend" hesperides/Dockerfile && rm vsct-hesperides/Dockerfile.prepend'
                    sh 'cat vsct-hesperides/Dockerfile.append >> hesperides/Dockerfile && rm vsct-hesperides/Dockerfile.append'
                    sh 'cp -r vsct-hesperides/* hesperides/'
                    // On définit les labels et on passe les variables d'environnement des proxys HTTP
                    def hesGitCommit = sh(returnStdout: true, script: 'cd hesperides && git rev-parse --short HEAD').trim()
                    def hesGitCommitMsg = sh(returnStdout: true, script: 'cd hesperides && git log -1 --pretty=%s').trim().replaceAll("\"","\\\\\"")
                    // Attention : les messages de commit contenant des quotes font planter la pipeline
                    def buildArgs = "--build-arg http_proxy --build-arg https_proxy --build-arg BUILD_TIME=${env.BUILD_TIME} --build-arg GIT_TAG=${env.DATE} --build-arg GIT_BRANCH=${params.GIT_BRANCH} --build-arg GIT_COMMIT=${hesGitCommit} --build-arg GIT_COMMIT_MSG=\"${hesGitCommitMsg}\""
                    def labelArgs = "--label git_commit=${hesGitCommit} --label tuyauterie_git_commit=${env.GIT_COMMIT} --label build_time=${env.BUILD_TIME}"
                    // On build l'image Docker :
                    withMaven(globalMavenSettingsConfig: 'global_maven_settings', mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                        sh 'cp $MVN_SETTINGS hesperides/settings.xml'
                        sh 'cp $GLOBAL_MVN_SETTINGS hesperides/globalSettings.xml'
                        echo "docker build --no-cache --pull ${labelArgs} ${buildArgs} ./hesperides -t $DOCKER_IMAGE_NAME:testing"
                        sh "docker build --no-cache --pull ${labelArgs} ${buildArgs} ./hesperides -t $DOCKER_IMAGE_NAME:testing"
                    }
                    // On affiche tous les labels de l'image générée :
                    sh "docker inspect --format '{{.ContainerConfig.Labels}}' $DOCKER_IMAGE_NAME:testing"
                    // On publie l'image sur artifactory :
                    withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                        sh "docker push $DOCKER_IMAGE_NAME:testing"
                    }
                }
            }
        }
        stage('Redéploiement de REL1') {
            when { expression { params.GIT_BRANCH == 'master' } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "REL1")]
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'integration'") {
            when { expression { params.GIT_BRANCH != 'master' } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'integration')]
            }
        }
        stage('Redéploiement de INT1') {
            when { expression { params.GIT_BRANCH != 'master' } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "INT1")]
            }
        }
        stage("Integ/NR: BDDs ActiveDirectory") {
            // Lucas 2019/06/07: je limite temporairement ce stage à la branche 'access-control' tant qu'elle n'est pas mergée
            when { expression { params.GIT_BRANCH == 'access-control' } }
            environment {
                LDAP_URL = 'ldaps://ad-ldap-access.socrate.vsct.fr:636'
                LDAP_DOMAIN = 'groupevsc'
                LDAP_USER_SEARCH_BASE = 'dc=groupevsc,dc=com'
                LDAP_ROLE_SEARCH_BASE = 'ou=ARCHITECTURE,dc=groupevsc,dc=com'

                // Les 3 variables suivantes sont-elles toujours utiles ?
                LAMBDA_USER_GROUP_DN = 'CN=DL_REST_HESPERIDES,OU=Distribution_List,OU=ARCHITECTURE,DC=groupevsc,DC=com'
                LDAP_PROD_GROUP_DN = 'CN=GG_A_HESPERIDES_PROD,OU=Groups,OU=ARCHITECTURE,DC=groupevsc,DC=com'
                LDAP_TECH_GROUP_DN = 'CN=DL_VSCT_Avengers,OU=Distribution_List,OU=ARCHITECTURE,DC=groupevsc,DC=com'

                PROD_GROUP_CN = 'GG_A_HESPERIDES_PROD'
                OTHER_GROUP_CN = 'DL_REST_HESPERIDES'
            }
            steps {
                script {
                    dir ('hesperides') {
                        git(url: 'https://github.com/voyages-sncf-technologies/hesperides',
                            branch: params.GIT_BRANCH)
                        withMaven(globalMavenSettingsConfig: 'global_maven_settings', mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                            withCredentials([usernamePassword(credentialsId: 'hesperides', usernameVariable: 'LAMBDA_USERNAME', passwordVariable: 'LAMBDA_PASSWORD')]) {
                                withCredentials([usernamePassword(credentialsId: 'a_prod_user', usernameVariable: 'PROD_USERNAME', passwordVariable: 'PROD_PASSWORD')]) {
                                    withCredentials([usernamePassword(credentialsId: 'rundeck_usl', usernameVariable: 'NOGROUP_USERNAME', passwordVariable: 'NOGROUP_PASSWORD')]) {
                                        sh "mvn install -Dmaven.test.skip=true"
                                        sh "mvn -pl tests/activedirectory-integration verify " +
                                                "-Dauth.lambdaUsername=$LAMBDA_USERNAME " +
                                                "-Dauth.lambdaPassword=$LAMBDA_PASSWORD " +
                                                "-Dauth.prodUsername=$PROD_USERNAME " +
                                                "-Dauth.prodPassword=$PROD_PASSWORD " +
                                                "-Dauth.nogroupUsername=$NOGROUP_USERNAME " +
                                                "-Dauth.nogroupPassword=$NOGROUP_PASSWORD " +
                                                "-Dauth.prodGroupCn=$PROD_GROUP_CN " +
                                                "-Dauth.otherGroupCn=$OTHER_GROUP_CN " +
                                                "-Djavax.net.ssl.trustStore=\$PWD/../vsct-hesperides/certificates/trustore"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Création/mise à jour du tag sur repo GitHub') {
            when { expression { params.GIT_BRANCH == 'master' } }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-hesperides-adm', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        dir ('hesperides') {
                            // Le tag peut déjà exister, on essaie donc de le supprimer au préalable
                            sh "git config user.name 'Jenkins pipeline'"
                            sh "git tag -d $DATE || true"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides.git --delete $DATE || true"
                            sh "git tag $DATE"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides.git --tags"
                        }
                    }
                }
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'latest'") {
            when { expression { params.GIT_BRANCH == 'master' } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'latest')]
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
