#!groovy

import java.text.SimpleDateFormat

import groovy.json.JsonSlurperClassic

def newDockerImagePublished = false
def enablePromotionToLatest = true

pipeline {
    agent {
        node {
            label 'docker'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    triggers{ cron('H/5 * * * 1-5') }
    environment {
        DOCKER_IMAGE_NAME = 'hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides-gui'
        DATE = (new SimpleDateFormat("yyyy-MM-dd")).format(new Date())
        BUILD_TIME = (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())
    }
    parameters {
        booleanParam(name: 'IGNORE_NEW_VERSION_CHECK', defaultValue: false)
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'identify Docker hub image')
    }
    stages {
        stage("New DockerHub image detection") {
            steps {
                retry(3) {
                    script {
                        if (params.IGNORE_NEW_VERSION_CHECK) {
                            newDockerImagePublished = true
                        } else {
                            withCredentials([usernamePassword(credentialsId: 'hesperides-dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                //newDockerImagePublished = getREL1frontendGitCommit() != getDockerHubLatestImageGitCommit('hesperides/hesperides-gui', env.USERNAME, env.PASSWORD)
                                newDockerImagePublished = getDockerImageGitCommitLabelFromArtifact('vsct-hesperides/hesperides-gui', 'testing') != getDockerHubLatestImageGitCommit('hesperides/hesperides-gui', params.DOCKER_TAG, env.USERNAME, env.PASSWORD)
                            }
                        }
                    }
                }
            }
        }
        stage("Docker build 'testing' image") {
            when { expression { newDockerImagePublished } }
            steps {
                script {
                    def labelArgs = "--label tuyauterie-git-commit=${GIT_COMMIT} --label 'tuyauterie-build-time=${env.BUILD_TIME}'"
                    sh "echo 'FROM hesperides/hesperides-gui' | docker build --no-cache --pull ${labelArgs} -t $DOCKER_IMAGE_NAME:testing -"
                    // On affiche tous les labels de l'image générée :
                    sh "docker inspect --format '{{.ContainerConfig.Labels}}' $DOCKER_IMAGE_NAME:testing"
                    // On publie l'image sur artifactory :
                    withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                        sh "docker push $DOCKER_IMAGE_NAME:testing"
                    }
                }
            }
        }
        stage('Déploiement de "testing" sur REL1') {
            when { expression { newDockerImagePublished && params.DOCKER_TAG == 'latest' } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "REL1")]
            }
        }
        stage("Tests d'intégration et de non-regression") {
            when { expression { newDockerImagePublished } }
            steps {
                echo('TODO')
            }
        }
        stage('Création/mise à jour du tag sur repo GitHub') {
            when { expression { newDockerImagePublished && params.DOCKER_TAG == 'latest' } }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-hesperides-adm', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        dir ('hesperides-gui') {
                            // Le tag peut déjà exister, on essaie donc de le supprimer au préalable
                            sh "git config user.name 'Jenkins pipeline'"
                            sh "git tag -d $DATE || true"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides-gui.git --delete $DATE || true"
                            sh "git tag $DATE"
                            sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides-gui.git --tags"
                        }
                    }
                }
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'latest'") {
            when { expression { newDockerImagePublished && params.DOCKER_TAG == 'latest' } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'latest')]
            }
        }
        stage("Promotion de l'image Docker 'testing' en 'integration'") {
            when { expression { newDockerImagePublished && params.DOCKER_TAG != 'latest' } }
            steps {
                build job: "promote", parameters: [string(name: 'DOCKER_IMAGE_NAME', value: env.DOCKER_IMAGE_NAME),
                                                   string(name: 'FROM_TAG', value: 'testing'),
                                                   string(name: 'NEW_TAG', value: 'integration')]
            }
        }
        stage('Déploiement de "latest" sur INT1') {
            when { expression { newDockerImagePublished && params.DOCKER_TAG != 'latest' && enablePromotionToLatest } }
            steps {
                build job: "deploy", parameters: [string(name: 'PLATFORM', value: "INT1")]
            }
        }
    }
    post {
        always {
            deleteDir()
        }
        failure {
            // Notification vers room Teams Avengers > Hefpérides
            office365ConnectorSend  status: currentBuild.currentResult, webhookUrl: 'https://outlook.office.com/webhook/838cfd20-344e-4053-97eb-5fa1f7fb25f9@85eca096-674d-4fd9-9a9e-ae1178e2ee56/IncomingWebhook/1999a50228794e95a1c17374a131da2e/56ceab7b-fee5-4173-882e-6504575c0bc8'
        }
    }
}

def getREL1frontendGitCommit() {
    try {
        String gitCommit = sh(returnStdout: true, script: """curl --fail -sk https://hesperides-dev.socrate.vsct.fr:56789/index.html | grep -F ' GIT_COMMIT ' | sed "s/.*'\\([^ ]\\+\\)'.*/\\1/" """).trim()
        println "Current frontend REL1 version is git commit: $gitCommit"
        return gitCommit
    } catch(Exception exception) {
        println "Exception: $exception"
        println "As frontend on REL1 platform cannot be reached, we trigger a build & redeploy"
        return 'UNREACHABLE'
    }
}

def getDockerImageGitCommitLabelFromArtifact(String image, String tag) {
    withCredentials([usernamePassword(credentialsId: 'hesperides', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        final manifestResponse = sh(returnStdout: true, script: "curl --fail -su $USERNAME:$PASSWORD https://hesperides-docker-all-local.artifact.cloud.socrate.vsct.fr/v2/${image}/manifests/${tag}").trim()
        final topLayer = new JsonSlurperClassic().parseText(manifestResponse).history[0].v1Compatibility
        final gitCommit = new JsonSlurperClassic().parseText(topLayer).config.Labels
        println "Artifact ${image}:${tag} has label git_commit=$gitCommit"
        return gitCommit
    }
}

// API doc: https://docs.docker.com/registry/spec/api/#manifest
// Code inspired by: https://gist.github.com/alexanderilyin/8cf68f85b922a7f1757ae3a74640d48a
def getDockerHubLatestImageGitCommit(String image, String tag, String username, String password) {
    final AUTH_DOMAIN = 'auth.docker.io'
    final AUTH_SERVICE = 'registry.docker.io'
    final API_DOMAIN = 'registry-1.docker.io'
    final AUTH_SCOPE = "repository:${image}:pull"
    final tokenResponse = sh(returnStdout: true, script: "curl --fail --silent -u ${username}:${password} 'https://${AUTH_DOMAIN}/token?service=${AUTH_SERVICE}&scope=${AUTH_SCOPE}'").trim()
    final token = new JsonSlurperClassic().parseText(tokenResponse).token
    final manifestResponse = sh(returnStdout: true, script: "curl --fail --silent -H 'Authorization: Bearer ${token}' https://${API_DOMAIN}/v2/${image}/manifests/${tag}").trim()
    final topLayer = new JsonSlurperClassic().parseText(manifestResponse).history[0].v1Compatibility
    final gitCommit = new JsonSlurperClassic().parseText(topLayer).config.Labels.git_commit
    println "Docker hub ${image}:${tag} has label git_commit=$gitCommit"
    return gitCommit
}
