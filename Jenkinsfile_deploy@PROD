#!groovy

@Library(["rundeck", "toolbox-yaml"]) _

import groovy.json.JsonSlurperClassic

def newVersionPublished = false

node('prod') {
    platformsList = prodtoolbox.getEnvironments('HES').join('\n')
}
pipeline {
    agent {
        node {
            label 'prod'
        }
    }
    triggers {
        parameterizedCron('''
 0 3 * * 1-5 %PLATFORM=PRD1
30 3 * * 1-5 %PLATFORM=PRD6
        ''')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    parameters {
        // TODO: deploy sur 2 PRDs, avec https://github.com/jenkinsci/parameterized-scheduler-plugin#declarative-pipeline-configuration-example ?
        // Le premier choix est utilisé comme valeur par défaut, y compris lors de l'exécution cronnée :
        choice(choices: platformsList, name: "PLATFORM", description: "OBLIGATOIRE : Plateforme sur laquelle sera fait le déploiement")
        booleanParam(name: 'IGNORE_NEW_VERSION_CHECK', defaultValue: false)
    }
    stages {
        stage('Détection de nouvelle version') {
            steps {
                script {
                    if (params.IGNORE_NEW_VERSION_CHECK) {
                        newVersionPublished = true
                    } else {
                        sh 'apt update -y && apt install -y jq'
                        newVersionPublished = (getLastVersionFromArtifact('hesperides/vsct-hesperides') != getCurrentBackendProdVersion()
                                            || getLastVersionFromArtifact('hesperides/vsct-hesperides-gui') != getCurrentFrontendProdVersion())
                    }
                }
            }
        }
        stage('Insertion en fresque OCC') {
            when { expression { newVersionPublished } }
            steps {
                script {
                    git(url: 'git@gitlab.socrate.vsct.fr:avengers/hesperides-tools.git', branch: 'master')
                    def resume = "Déploiement de la version backend=" + getLastVersionFromArtifact('hesperides/vsct-hesperides') + " frontend=" + getLastVersionFromArtifact('hesperides/vsct-hesperides-gui')
                    withCredentials([usernamePassword(credentialsId: 'usl_ci', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "hesperides-tools/occ_create.py --username ${env.USERNAME} --password ${env.PASSWORD} --type intervention --title "[Hesperides] Déploiement applicatif automatisé" --resume "${resume}" --estimated-length-in-min 5 --status 1 --tag 10 --risk 3"
                    }
                }
            }
        }
        stage('Initialisation des Paramètres') {
            when { expression { newVersionPublished } }
            steps {
                script {
                    // Set params as they will be used later
                    platformContainers = readJSON(text: prodtoolbox.yPath("/HES/${params.PLATFORM}/DOCKER").toString()).result  // http://toolbox-server.socrate.vsct.fr/prod/api/toolbox?function=ypath&args=/HES/PRD1/DOCKER
                    dockerHosts = platformContainers.HOSTS.collect { it.NAME } as Set

                    // Set user
                    wrap([$class: 'BuildUser']) {
                        user = env.BUILD_USER_ID ?: 'jenkins'
                    }
                    rundeck.setRundeckUser(user)
                    // Set up Rundeck token
                    withCredentials([string(credentialsId: 'rundeck', variable: 'TOKEN')]) {
                        rundeck.setRundeckToken(TOKEN)
                    }
                }
            }
        }
        stage('Puppet refresh') {
            when { expression { newVersionPublished } }
            steps {
                script {
                    dockerHosts.each { host ->
                        Map optionsRundeck = [
                                refresh_puppet_agent: "complet",
                                serveur             : [host[0].toLowerCase()]
                        ]
                        rundeck.startAndWaitWithAutofill("HES", "Outils/refresh_puppet_agent", optionsRundeck)
                    }
                }
            }
        }
        stage('Restart Docker image') {
            when { expression { newVersionPublished } }
            steps {
                script {
                    for (dockerContainer in platformContainers) {
                        for (host in dockerContainer.HOSTS) {
                            echo "Restarting Docker instances on ${host.NAME}"
                            for (instance in host.INSTANCES) {
                                echo "Restarting Docker instance ${instance.NAME}"
                                rundeck.startAndWaitWithAutofill("HES", "Outils/restart_docker", [
                                        composant  : "DOCKER-${dockerContainer.IMAGE}",
                                        instances  : instance.NAME,
                                        trigramme  : 'HES',
                                        techno     : "DOCKER",
                                        TargetNodes: "HES${params.PLATFORM}DOCKER${dockerContainer.IMAGE}-${host.NAME}",
                                        plateforme : params.PLATFORM,
                                        serveur    : host.NAME.toLowerCase(),
                                ])
                            }
                            // On attend que les conteneurs front & back aient redémarrés avant de passer au suivant sur le même DC :
                            timeout(2) { // MINUTES
                                waitUntil {
                                    script {
                                        def endpoint = params.PLATFORM == 'PRD1' ? 'hesperides-dc1' : 'hesperides-dc2'
                                        def cookieValue = 'hes' + host.NAME.toLowerCase()[0..2] + (params.PLATFORM == 'PRD1' ? 'p1' : 'p6') + '1back'
                                        def cmd = "curl -skv -H 'Cookie: HES${params.PLATFORM}=${cookieValue}' https://${endpoint}.socrate.vsct.fr/rest/versions"
                                        echo cmd
                                        def output = sh(script:cmd, returnStdout:true)
                                        echo output
                                        try {
                                            def hostname = new JsonSlurperClassic().parseText(output.trim()).HOSTNAME
                                            return hostname.toLowerCase() == host.NAME.toLowerCase()
                                        } catch (JsonException) {
                                            return false
                                        } catch (IllegalArgumentException) {
                                            return false
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            wrap([$class: 'MesosSingleUseSlave']) {}
            deleteDir()
        }
    }
}

def getLastVersionFromArtifact(String imageName) {
    withCredentials([usernamePassword(credentialsId: 'hesperides', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        String version = sh(returnStdout: true, script: "curl -su $USERNAME:$PASSWORD https://hesperides-docker-all-local.artifact.cloud.socrate.vsct.fr/v2/${imageName}/tags/list | jq -r .tags[] | grep ^20 | tail -n 1").trim()
        println "Latest Artifact version for $imageName : $version"
        return version
    }
}

def getCurrentBackendProdVersion() {
    String version = sh(returnStdout: true, script: "curl -sk https://hesperides.socrate.vsct.fr/rest/versions | jq -r .GIT_TAG").trim()
    println "Current backend prod version : $version"
    return version
}

def getCurrentFrontendProdVersion() {
    String version = sh(returnStdout: true, script: "curl -sk https://hesperides.socrate.vsct.fr/index.html | grep -F ' GIT_TAG ' | sed 's/.*\\(20[0-9-]\\+\\).*/\\1/'").trim()
    println "Current frontend prod version : $version"
    return version
}
