#!groovy

import java.text.SimpleDateFormat

pipeline {
    agent {
        node {
            label 'docker'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    parameters {
        string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides')
        string(name: 'FROM_TAG', defaultValue: 'testing', description: 'testing ou yyyy-MM-dd')
        choice(name: 'NEW_TAG', choices: ['latest', 'testing'])
    }
    environment {
        DATE = (new SimpleDateFormat("yyyy-MM-dd")).format(new Date())
    }
    stages {
        stage("Promotion de l'image Docker") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                    sh "docker pull ${params.DOCKER_IMAGE_NAME}:${params.FROM_TAG}"
                    sh "docker tag ${params.DOCKER_IMAGE_NAME}:${params.FROM_TAG} ${params.DOCKER_IMAGE_NAME}:${params.NEW_TAG}"
                    sh "docker push ${params.DOCKER_IMAGE_NAME}:${params.NEW_TAG}"
                }
            }
        }
        stage("Publication d'une image versionn√©e avec la date") {
            when { expression { params.FROM_TAG == 'testing' && params.NEW_TAG == 'latest' } }
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                    sh "docker tag ${params.DOCKER_IMAGE_NAME}:${params.FROM_TAG} ${params.DOCKER_IMAGE_NAME}:${env.DATE}"
                    sh "docker push ${params.DOCKER_IMAGE_NAME}:${env.DATE}"
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
