#!groovy

@Library(["toolbox-yaml"]) _

pipeline {
    agent {
        node {
            label 'maven3'
        }
    }
    triggers {
        cron('0 8 * * 1-5')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    parameters {
        string(name: 'auth', defaultValue: 'hesperides', description: """user:password (ex: "tech:password") ou simplement un credentialsId d'où tirer le user/password""")
        choice(name: "host", default: 'http://ciaobaby.socrate.vsct.fr/rest/versions', description: 'Plateforme sur laquelle se fera le test de charge')
        string(name: 'warmUpDuration', defaultValue: '30s')
        string(name: 'duration', defaultValue: '5min')
        string(name: 'usersPerSecond', defaultValue: '4')
        string(name: 'percentOkMin', defaultValue: '99', description: "% d'appels qui doivent être OK pour que le test soit un succès")
        string(name: 'percentile99ResponseTimeMax', defaultValue: '100', description: "temps de réponse max acceptable (en ms) pour l'ensemble des 1% des requêtes les plus lentes")
    }
    stages {
        stage('Pull Project') {
            steps {
                script {
                    git(url: 'https://github.com/voyages-sncf-technologies/hesperides.git',
                        branch: 'master')

                    if (params.auth.contains(':')) {
                        auth = params.auth
                    } else {
                        withCredentials([usernamePassword(credentialsId: params.auth, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            auth = "${env.USERNAME}:${env.PASSWORD}"
                        }
                    }

                    mvn_cmd = "mvn -f tests/perfs/pom.xml gatling:execute -Pgatling -Dgatling.simulationClass=HesperidesApi -DbaseUrl=http://${params.host}/rest -Dauth=${auth} " +
                              "-DusersPerSecond=${params.usersPerSecond} -DpercentOkMin=${params.percentOkMin} -Dpercentile99ResponseTimeMax=${params.percentile99ResponseTimeMax}"
                }
            }
        }

        stage("Warmup de l'appli") {
            steps {
                withMaven(mavenSettingsConfig: 'global_maven_settings') {
                    withMaven(mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                        sh "${mvn_cmd} -Dduration=${params.warmUpDuration} || true"
                    }
                }
            }
        }
        
        stage('Gatling stress test') {
            steps {
                withMaven(mavenSettingsConfig: 'global_maven_settings') {
                    withMaven(mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                        sh "${mvn_cmd} -Dduration=${params.duration}"
                    }
                }
            }
        }
    }
}
